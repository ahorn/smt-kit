{"name":"smt-kit","tagline":"C++11 library for many-sorted logics","body":"# SMT Kit\r\n\r\nSMT Kit is a C++11 library for many-sorted logics. It particularly targets quantifier-free SMT-LIB 2.0 formulas. Currently, SMT Kit supports CVC4, MathSAT5 and Z3.\r\n\r\n## API Usage\r\n\r\nTo use SMT Kit, `#include <smt>`. Here's an API usage example that encodes and checks De Morgan's law:\r\n\r\n```C++\r\n// Symbols (e.g. \"x\") must be globally unique!\r\nsmt::Bool x = smt::any<smt::Bool>(\"x\");\r\nsmt::Bool y = smt::any<smt::Bool>(\"y\");\r\nsmt::Bool lhs = !(x && y);\r\nsmt::Bool rhs = !x || !y;\r\n\r\n// Other solvers include smt::MsatSolver and smt::Z3Solver \r\nsmt::CVC4Solver solver;\r\nsolver.add(lhs != rhs);\r\nassert(smt::unsat == solver.check());\r\n```\r\n\r\nThe compiler will check the arguments of SMT functions at compile-time.\r\nFor example, the above example will not compile if `x` is a `smt::Int`.\r\nHowever, these compile-time checks do not apply to logic signatures.\r\nFor example, when `smt::QF_BV_LOGIC` is specified for the solver but\r\nan `smt::Array` is also used, there won't be a compile-time error.\r\n\r\nSeveral more examples including incremental solving, function applications\r\nand array logic expressions can be found in the [functional tests][api].\r\n\r\n[api]: https://github.com/ahorn/smt-kit/blob/master/test/smt_functional_test.cpp\r\n\r\n## Installation\r\n\r\nFor SMT Kit to work, [CVC4][cvc4], [MathSAT5][msat] and [Z3][z3] must be installed\r\nseparately. Read their software licences carefully. The SMT solver's installation\r\ninstructions can be found in the `solvers` [directory][solvers].\r\n\r\nTo build SMT Kit on a (mostly) POSIX-compliant operating system,\r\nexecute the following commands from the `smt-kit` directory:\r\n\r\n    $ ./autogen.sh\r\n    $ ./configure\r\n    $ make\r\n    $ make test\r\n    $ make install\r\n\r\nIf `./configure` fails, you may have to set environment variables. For example,\r\nto compile on OS X with clang++ use the command `./configure CXX=clang++`.\r\nBut see also the troubleshooting section below.\r\n\r\nIf `make test` fails, you can still install, but it is likely that some\r\nfeatures of this library will not work correctly on your system.\r\nProceed at your own risk.\r\n\r\nNote that `make install` may require superuser privileges.\r\n\r\nFor advanced usage information on other configure options refer to the\r\n[Autoconf documentation][autoconf].\r\n\r\n[autoconf]: http://www.gnu.org/software/autoconf/\r\n[cvc4]: http://cvc4.cs.nyu.edu/\r\n[msat]: http://mathsat.fbk.eu/\r\n[z3]: http://z3.codeplex.com/\r\n[solvers]: https://github.com/ahorn/smt-kit/tree/master/solvers\r\n\r\n## Troubleshooting\r\n\r\nSince SMT Kit uses advanced C++11 language features, older compiler\r\nversions are likely to be troublesome. To date, we have successfully\r\ncompiled and tested the code on OS X with g++ 4.8.1 and clang++ 4.2.\r\nBut the choice of compiler also depends on the underlying SMT solvers.\r\nIn particular, MathSAT5 on OS X does not currently link with clang++\r\nand LLVM's C++11 standard library (libc++). As a workaround, g++ from\r\nMac Ports works fine. This compiler portability issue has been reported\r\nto mathsat@fbk.eu.\r\n\r\n## Bug Reports\r\n\r\nYou are warmly invited to submit patches as Github pull request,\r\nformatted according to the existing coding style.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}